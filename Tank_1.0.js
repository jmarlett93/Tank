 function tankConstructor(name, speed, engineNoise, armor, gun, tankPos){
   
    var isAlive = true;
    //tankPos needs to be generated by a random tile and assigned when  tank is generated
    /*
          setPos();
    */
    return {
             name: name,
             speed: speed,
             engineNoise: engineNoise,
             armor: armor,
             gun: gun,
             isAlive: isAlive,
             tankPos: tankPos,
             rev: rev,
             engineDamage: engineDamage,
             setPos: setPos,
             moveTank: moveTank
         };

    ///this method is just to be funny
    function rev() {
    console.log(engineNoise);
        if(engineDamage() < 10){
            console.log("puttputt");
        } else {
        console.log("BOOM! " + name + "'s engine has overheated and vehicle is destroyed");
        isAlive = false}
    }
    
    function engineDamage() {
    return Math.floor(Math.random() * 10 + 1);
    }
    
    function setPos(mapArray){ //sets initial position based on the board array
        //use .length to find the parameters
      // Can this be salvaged or is it unneccessary ?
      var numPlaces = mapArray.length();
      var randTile = mapArray[Math.floor(Math.random() * numPlaces )];
      return tankPos = randTile.position;
    }
 
    function moveTank() {// recieving a tile and reading a new 
    //it keeps the position in between the boundaries of the given gameboard
    
    
    }
 } //end of tank class
 
 // defines a gameboard object containing an x,y position and possible movements.
function tileConstructor (position, maxCoords) {
    
   
    var moveNorth = [];
    var moveSouth = [];
    var moveEast = [];
    var moveWest = [];
    
    createMoves();
    
    return {
            
            position: position,
            moveNorth: moveNorth,
            moveSouth: moveSouth,
            moveEast: moveEast,
            moveWest: moveWest,
            randMove: randMove,
            givePos: givePos
      };
    
    function randMove(){
        var rand = Math.floor(Math.random() * 4);
        
        if(rand == 0){
            return moveNorth;
        }
         if(rand == 1){
            return moveSouth;
        }
         if(rand == 2){
            return moveEast;
        }
         if(rand == 3){
            return moveWest;
        }
    }
    
    function givePos() { return position; }
    
    // generates the coordinates of adjacent tiles
    function createMoves(){
        if (position[1] == maxCoords[1]){
            moveNorth = position ;
        } else {
            moveNorth = [position[0], position[1] + 1];
            }  
        if (position[1] == 1){
            moveSouth = position; 
        } else {
            moveSouth = [position[0], position[1] - 1];
            }
        if (position[0] == 1){   
            moveEast = position;
        } else {
            moveEast = [position[0] - 1, position[1]];
                }
         if (position[0] == maxCoords[0]){
            moveWest = position ;
        } else {
            moveWest = [position[0] + 1, position[1]];
            }
            return moveNorth, moveSouth, moveEast, moveWest;
        }
  
    }  // end of tiles class
 
function boardConstructor (xparam, yparam, tankData){
    
    var tiles = generateTiles();
    var tanks = generateTanks();
    
    return {
    tiles: tiles,
    getTileByCoordinate: getTileByCoordinate,
    tanks: tanks
    };
    
    function generateTiles() {
    //adds objects representing each member of the array and its attributes
        var tempTiles = [];
        for (var i = 0 ; i < yparam; i++ ) {
            //set up the number of Y iterations because it is the same number by row
            for (var j = 0 ; j < xparam ; j++ ) {  //loop through X and create arrays with x numbers
                var elem = tileConstructor([j+1 , i+1],[xparam, yparam]);
                tempTiles.push(elem);
                }
         }
    return tempTiles;
    }
    
    function getTileByCoordinate(coord) {
        return tiles.filter(validateWithCoordinate);

        function validateWithCoordinate(elem) {
            return (elem.position[0] === coord[0] && elem.position[1] === coord[1]);
            }
        }
     
     
     function generateTanks(){
         //returns an array of tank objects by reading a database of unique tank stats and calling tankConstructor
            
            var tankData = tankDataStorage();
            
            var arrTempTanks = [];
            
            
         for( var i = 0; i < tankData.tankDatabase.length ; i++ ) {
             
            var elem = tankData.tankDatabase[i].split(' ');
            
            var tempTank = tankConstructor( elem[0] , Number(elem[1]) , Number(elem[2]), Number(elem[3]), Number(elem[4]));
            
            arrTempTanks.push(tempTank);
         }   
         
         return arrTempTanks;
     }
        
     
     function playerLogic(){
        
        
        function manageMoves(){
         
        }
     }
     
   
}//end board constructor

function tankDataStorage(){
 
 var tankDatabase = ["Sherman 12 vroom 5 7", "Churchill 8 rumble 9 9", "Tiger 7 roar 10 10" ];
 
 var names = tabData();
    
    return {
       tankDatabase: tankDatabase,
       names: names
    }

    function tabData(){
        //Currently unused: searches database and adds strings of the names\
         //(first item of each database string) into another array.
         
      var tankNames = [];
        for(var i = 0; i < tankDatabase.length ; i++){
            var elem = tankDatabase[i].split(' ');
            tankNames.push(elem[0]);
        }
        return tankNames;
    }                        
}

var gameTimer = true;

var gameboard = boardConstructor(8,7,tankDataStorage);


while (gameTimer) {  
  
   
   console.log((gameboard.tiles[1]).position);
   
   console.log(gameboard.getTileByCoordinate([2,2]));
   
   console.log(gameboard.tanks);
  
gameTimer = false;
};
